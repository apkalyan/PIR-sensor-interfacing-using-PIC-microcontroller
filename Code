
#include <xc.h>  // Header file for the XC8 compiler

int flag = 0;

/*
*******************************************************************************************
                                Function Declarations
********************************************************************************************
*/
void delay_ms(int ms);
void Data(int Value);
void Cmd(int Value);
void Send2Lcd(const char Adr, const char *Lcd);
void initLCD(void);
void adc_interrupt(void);

/*
*******************************************************************************************
                                    Main Program
*******************************************************************************************
*/
void __interrupt() adc_interrupt() {
    if (ADIF == 1) {
        flag = 1;
        ADIF = 0;
    }
}

void main(void) {
    nRBPU=0;
    PCFG3=0;
    PCFG2=1;
    PCFG1=1;
    PCFG0=0;
    TRISB=0b00011111;
    // Port initialization
    TRISC = 0x00;   // PORTC as output (used for LCD control)
    TRISD = 0x00;   // PORTD as output (used for LCD data)

    TRISE0 = 0;     // RE0 as output (connected to Buzzer)
    PORTC = 0x00;   // Clear PORTC
    PORTE = 0x00;   // Clear PORTE

    // Initialize LCD
    initLCD();

    while (1) {
        Send2Lcd(0x80, "Press SW1 or SW4"); // LCD Data Outing Function
        RB5=0;
        RB6=1;
        RB7=1;
        
        if (RB1 == 0) {
            while (RB1 == 0) {
                while (1) {
                    if (RB0 == 1) {         // If PIR sensor detects motion
                        delay_ms(15);              // Minimum Delay To Power On LCD Module To Recieve Mode
                        Cmd(0X30); delay_ms(5);    // LCD Specification Commands
                        Cmd(0X30); delay_ms(1);    // LCD Specification Commands
                        Cmd(0X30); delay_ms(2);    // LCD Specification Commands
                        Cmd(0X38);                 // LCD Double Line Display Command
                        Cmd(0X06);                 // LCD Auto Increment Location Address Command
                        Cmd(0X01);                 // LCD Display Clear Command
                        Cmd(0X0C);                 // LCD Display ON Command
                        Send2Lcd(0x80, "ALERT! INTRUDED"); // LCD Data Outing Function
                        RE0 = 1;            // Turn on buzzer
                        while (1) {
                            GO = 1;
                            Cmd(0xC0);
                        }
                    } else {
                        delay_ms(15);              // Minimum Delay To Power On LCD Module To Recieve Mode
                        Cmd(0X30); delay_ms(5);    // LCD Specification Commands
                        Cmd(0X30); delay_ms(1);    // LCD Specification Commands
                        Cmd(0X30); delay_ms(2);    // LCD Specification Commands
                        Cmd(0X38);                 // LCD Double Line Display Command
                        Cmd(0X06);                 // LCD Auto Increment Location Address Command
                        Cmd(0X01);                 // LCD Display Clear Command
                        Cmd(0X0C);                 // LCD Display ON Command
                        Send2Lcd(0x80, "SAFE");    // LCD Data Outing Function
                        delay_ms(3);
                        RE0 = 0;            // Turn off buzzer
                    }
                  delay_ms(100); // Delay to avoid flickering  
                }
            }
        }

        if (RB2 == 0) {
            while (RB2 == 0) {
                while (1) {
                    if (RB0 == 1) {         // If PIR sensor detects motion
                        delay_ms(15);              // Minimum Delay To Power On LCD Module To Recieve Mode
                        Cmd(0X30); delay_ms(5);    // LCD Specification Commands
                        Cmd(0X30); delay_ms(1);    // LCD Specification Commands
                        Cmd(0X30); delay_ms(2);    // LCD Specification Commands
                        Cmd(0X38);                 // LCD Double Line Display Command
                        Cmd(0X06);                 // LCD Auto Increment Location Address Command
                        Cmd(0X01);                 // LCD Display Clear Command
                        Cmd(0X0C);                 // LCD Display ON Command
                        Send2Lcd(0x80, "ALERT! INTRUDED"); // LCD Data Outing Function
                        RE0 = 1;            // Turn on buzzer
                    } else {
                        delay_ms(15);              // Minimum Delay To Power On LCD Module To Recieve Mode
                        Cmd(0X30); delay_ms(5);    // LCD Specification Commands
                        Cmd(0X30); delay_ms(1);    // LCD Specification Commands
                        Cmd(0X30); delay_ms(2);    // LCD Specification Commands
                        Cmd(0X38);                 // LCD Double Line Display Command
                        Cmd(0X06);                 // LCD Auto Increment Location Address Command
                        Cmd(0X01);                 // LCD Display Clear Command
                        Cmd(0X0C);                 // LCD Display ON Command
                        Send2Lcd(0x80, "SAFE");    // LCD Data Outing Function
                        delay_ms(3);
                        RE0 = 0;            // Turn off buzzer
                    }
                 delay_ms(50); // Delay to avoid flickering
                }
            }
        }

       
    }
}

/*
*******************************************************************************************
* 	Function    : initLCD
* 	Description : Function to initialize the LCD
*******************************************************************************************
*/
void initLCD(void) {
    delay_ms(15);   // Minimum delay to power on LCD module to receive mode
    Cmd(0x30);      // LCD Specification Commands
    delay_ms(5);
    Cmd(0x30);      // LCD Specification Commands
    delay_ms(1);
    Cmd(0x30);      // LCD Specification Commands
    delay_ms(2);
    Cmd(0x38);      // LCD Double Line Display Command
    Cmd(0x06);      // LCD Auto Increment Location Address Command
    Cmd(0x01);      // LCD Display Clear Command
    Cmd(0x0C);      // LCD Display ON Command
}

/*
*******************************************************************************************
* 	Function    : Cmd
* 	Description : Function to send a command to LCD
* 	Parameters  : Value, contains the command to be sent
*******************************************************************************************
*/
void Cmd(int Value) {
    PORTD = (unsigned char)Value;
    RC1 = 0;   // RC1=0(RS=0) [Command Register Selection]
    RC0 = 0;   // RC0=0(R/W=0) [Write Process]
    RC2 = 1;   // RC2=1(Enable=1) [Enable Line ON]
    delay_ms(4);   // Minimum delay for hold on data
    RC2 = 0;   // RC2=0(Enable=0) [Enable Line OFF]
}

/*
*************************************************************************************
* 	Function    : Data
* 	Description : Function to send a data to LCD
* 	Parameters  : Value, contains the data to be sent
*************************************************************************************
*/ 
void Data(int Value) {
    PORTD = (unsigned char)Value;
    RC1 = 1;   // RC1=1(RS=1) [Data Register Selection]
    RC0 = 0;   // RC0=0(R/W=0) [Write Process]
    RC2 = 1;   // RC2=1(Enable=1) [Enable Line ON]
    delay_ms(4);   // Minimum delay for hold on data
    RC2 = 0;   // RC2=0(Enable=0) [Enable Line OFF]
}

/*
*************************************************************************************
* 	Function    : Send2Lcd
* 	Description : Function to send a string of data to LCD
* 	Parameters  : adr, contains the address of a string
*************************************************************************************
*/
void Send2Lcd(const char Adr, const char *Lcd) {
    Cmd(Adr);
    while (*Lcd != '\0') {
        Data(*Lcd);
        Lcd++;
    }
}

/*
*************************************************************************************
* 	Function    : delay_ms
* 	Description : Function for delay
* 	Parameters  : ms, contains milliseconds
*************************************************************************************
*/
void delay_ms(int ms) {
    int i, count;
    for (i = 1; i <= ms; i++) {
        count = 1000;
        while (count != 0) {
            count--;
        }
    }
}

